xquery version "3.0";
module namespace app="http://www.digital-archiv.at/ns/glaser/templates";
declare namespace tei="http://www.tei-c.org/ns/1.0";
declare namespace functx = 'http://www.functx.com';
import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://www.digital-archiv.at/ns/glaser/config" at "config.xqm";
import module namespace kwic = "http://exist-db.org/xquery/kwic" at "resource:org/exist/xquery/lib/kwic.xql";
declare function functx:substring-after-last
  ( $arg as xs:string? ,
    $delim as xs:string )  as xs:string {
    replace ($arg,concat('^.*',$delim),'')
 };
 
declare function functx:change-element-ns-deep
  ( $nodes as node()* ,
    $newns as xs:string ,
    $prefix as xs:string )  as node()* {

  for $node in $nodes
  return if ($node instance of element())
         then (element
               {QName ($newns,
                          concat($prefix,
                                    if ($prefix = '')
                                    then ''
                                    else ':',
                                    local-name($node)))}
               {$node/@*,
                functx:change-element-ns-deep($node/node(),
                                           $newns, $prefix)})
         else if ($node instance of document-node())
         then functx:change-element-ns-deep($node/node(),
                                           $newns, $prefix)
         else $node
 } ;
 
(:~
 : Takes a node containing a string encoded in the Dasi standard and returns a TEI encoded node 
 :
 : @$node a node containing a dasi-encoded string
:)
declare function app:DasiToTei($node as node()){
let $node := $node
let $text := $node/text()
let $text := replace($text, '<', '<add>')
let $text := replace($text, '>', '</add>')
let $text := concat('<div type="annotated">', $text, '</div>')
let $text := replace($text, '(\d).', '<lb n="$1"/>')
let $text := replace($text, '\[', '<supplied>' )
let $text := replace($text, '\]', '</supplied>' )
let $text := replace($text, '\(', '<unclear>')
let $text := replace($text, '\)', '</unclear>')
let $text := replace($text, '\{', '<del>')
let $text := replace($text, '\}', '</del>')
let $text := replace($text, '\.\.\.\s\.\.\.', '<gap quantity="plus4" unit="chars"></gap>')
let $tei := try{
    util:parse($text)
} catch * {
        <div type="error">Caught error {$err:code}: {$err:description} in document {app:getDocName($node)}</div>
        }
return $tei
}; 

(:~
 : Returns a list of adlib ID. 
 :
 : @param $date expects a date in form of a string in the format YYYY-MM-DD.
 : @param $max expects an integer in form of a string. 
:)
declare function app:getIDs($date as xs:string, $max as xs:string){
let $date := $date
let $baseUri := "http://opacbasis.w07adlib1.arz.oeaw.ac.at/wwwopac.ashx?"
let $limit := $max
let $otherparams := concat("&amp;limit=", $limit,"&amp;fields=priref")
let $giberish := "database=archive&amp;search=(pointer%207)%20and%20modification%20greater%20%27"
let $uri := concat($baseUri, $giberish, $date, $otherparams)
let $xml := doc($uri)
let $ids := $xml//priref 
let $countIds := count($ids)
return
    <result>
        <amount>{$countIds}</amount>
        {for $x in $ids return 
            <item>{$x}</item>}          
    </result>
};

(:~
 : Returns a single adlibXML document
 :
 : @param $id takes an adlib Identifier as string 
:)
declare function app:getAdlibXML($id as xs:string){
let $base := "http://opacbasis.w07adlib1.arz.oeaw.ac.at/wwwopac.ashx?action=search&amp;database=archive&amp;search=priref="
let $uri := concat($base, $id)
return $uri
};

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};


(:~
 : Returns the name of the document where the passed in node is located. 
 :
 : @param $node the node which document's name should be returned
:)
declare function app:getDocName($node as node()){
    let $name := functx:substring-after-last(document-uri(root($node)), '/')
    return $name
};

(:~
 : returns a string which contains a link to show.html and a document's name
 :
 : @param $node the node from which the the document's will be derived.
:)
declare function app:hrefToDoc($node as node()){
    let $name := functx:substring-after-last($node, '/')
    let $href := concat('show.html','?document=', app:getDocName($node))
        return $href
};

(:~
 : a basic full text search returning results in a KWIC-view
:)
declare function app:ft_search($node as node(), $model as map (*)) {
if (request:get-parameter("searchexpr", "") !="") then
let $searchterm as xs:string:= request:get-parameter("searchexpr", "")
for $hit in collection(concat($config:app-root, '/data/editions/'))//tei:p[ft:query(.,$searchterm)]
    	let $href := app:hrefToDoc(root($hit))
    	let $document := document-uri(root($hit))
    	let $score as xs:float := ft:score($hit)
    	order by $score descending
    	return
    		<tr>
        		<td>{$score}</td>
        		<td>{kwic:summarize($hit, <config width="40" link="{$href}"/>)}</td>
        		<td>{app:getDocName($hit)}</td>
    		</tr>
 else
    <div>Nothing to search for</div>
};

(:~
 : fetches all documents which contain the searched person
 :)
 
(: 
declare function app:listPers_hits($node as node(), $model as map(*), $searchkey as xs:string?, $path as xs:string?)
{
    for $hit in collection(concat($config:app-root, '/data/editions/'))//tei:TEI[.//tei:persName[@key=$searchkey] |.//tei:rs[@ref=concat("#",$searchkey)] |.//tei:rs[@key=contains(./@key,$searchkey)]]
    let $doc := document-uri(root($hit)) 
    return
    <li><a href="{app:hrefToDoc($hit)}">{app:getDocName($hit)}</a></li>   
 };
:)
declare function app:listPers_hits($node as node(), $model as map(*), $searchkey as xs:string?, $path as xs:string?)
{
    for $hit in collection(concat($config:app-root, '/data/editions/'))//tei:TEI[.//tei:persName[@key=$searchkey] |.//tei:rs[@ref=concat("#",$searchkey)] |.//tei:rs[@key=contains(./@key,$searchkey)]]
    let $doc := document-uri(root($hit)) 
    return
    <li>
        <a href="{app:hrefToDoc($hit)}">{app:getDocName($hit)}</a>
    </li> 
 };
 
(:~
 : creates a basic person-index derived from the  '/data/indices/listperson.xml'
 :)
declare function app:listPers($node as node(), $model as map(*)) {
    let $hitHtml := "hits.html?searchkey="
    for $person in doc(concat($config:app-root, '/data/indices/listperson.xml'))//tei:listPerson/tei:person
        return
        <li>
            <a href="{concat($hitHtml,data($person/@xml:id))}">{$person/tei:persName}</a>
        </li>
};

(:~
 : creates a basic table of content derived from the documents stored in '/data/editions'
 :)
declare function app:toc($node as node(), $model as map(*)) {
    for $doc in collection(concat($config:app-root, '/data/editions/'))//tei:TEI
        return
        <li>
            <a href="{app:hrefToDoc($doc)}">{app:getDocName($doc)}</a>
        </li>   
};

(:~
 : perfoms an XSLT transformation
 :)
declare function app:XMLtoHTML ($node as node(), $model as map (*), $query as xs:string?) {
let $ref := xs:string(request:get-parameter("document", ""))
let $directory := xs:string(request:get-parameter("directory", "editions"))
let $xml := doc(replace(concat($config:app-root,"/data/", $directory, "/",$ref), '/exist/', '/db/'))
let $xsl := if (xs:string(request:get-parameter("xslt", "")) eq "")
    then 
        doc(concat($config:app-root, "/resources/xslt/xmlToHtml.xsl"))
    else
        doc(concat($config:app-root, "/resources/xslt/",request:get-parameter("xslt", "")))
let $params := 
<parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","xslt"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>
return 
    transform:transform($xml, $xsl, $params)
};

(:~
 : triggers a batch transformation of adlibXML to TEI-XML which will be stored in /data/editions/ and returns a list of transformed documents
 :)
declare function app:triggerBatchTrans($node as node(), $model as map(*)) {
if (request:get-parameter("modified-after", "") !="" or request:get-parameter("max", "") !="" ) then
<ul class="list-unstyled">
{
let $modifiedAfter := request:get-parameter('modified-after', '2019-08-01')
let $max := xs:string(request:get-parameter('max', '10'))
let $resultlist := app:getIDs($modifiedAfter, $max)
for $x in $resultlist//priref/text()
let $adlibXML := doc(app:getAdlibXML($x))
let $params := <parameters>
   {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","xslt"))
    return
       <param name="{$p}"  value="{$val}"/>
   }
</parameters>

let $xsl := doc(concat($config:app-root, '/resources/xslt/adlibXMLtoTEI.xsl'))
let $tei := transform:transform($adlibXML, $xsl, $params)
let $time := replace(xs:string(current-dateTime()), '[:+/.]', '-')
let $filename := concat($x,'__', $time, '.xml')
let $storedirectory := concat($config:app-root, '/data/editions/')
let $store := xmldb:store(concat($config:app-root, '/data/editions/'), $filename, $tei)
return
    <li>
        <a href="show.html?document={$filename}">{$filename}</a>
    </li>
}
</ul>
else
<p>please fill out the form and hit the button</p>
};

(:~
 : iterates over all docs stored in 'data/editions' parses the original transcription and stores the result in tei:div[@type='annotaed']
 :)
declare function app:annotateOrig($node as node(), $model as map(*)) {
for $x in collection(concat($config:app-root, '/data/editions'))//tei:TEI
let $dasi := $x//tei:div[@type='original']
let $annotated := app:DasiToTei($dasi)
let $annotated := functx:change-element-ns-deep($annotated, "http://www.tei-c.org/ns/1.0", "tei")
let $newTEI := update insert $annotated into $x//tei:body

return <li>updated {app:getDocName($x)}</li>
};